{"version":3,"sources":["../src/api_helpers.js"],"names":["getShortmathTemplate","templateId","Promise","resolve","Ajax","call","methodname","args","id","done","foundTemplate","JSON","parse","template","fail","notification","exception","defaultFailCallback","getShortmathEditorconfig","questionId","editorconfig","saveShortmathTemplate","name","addNotification","message","type","succeeded","deleteShortmathTemplate"],"mappings":"2QAsBA,OACA,O,kXAQO,GAAMA,CAAAA,CAAoB,4CAAG,WAAOC,CAAP,wGAIX,IAAIC,CAAAA,OAAJ,CAAY,SAAAC,CAAO,CAAI,CAE5CC,UAAKC,IAAL,CAAU,CAAC,CACTC,UAAU,CAAE,8BADH,CAETC,IAAI,CAAE,CAAEC,EAAE,CAAEP,CAAN,CAFG,CAGTQ,IAAI,CAAE,SAAAC,CAAa,CAAI,CACrBP,CAAO,CAACQ,IAAI,CAACC,KAAL,CAAWF,CAAa,CAACG,QAAzB,CAAD,CACR,CALQ,CAMTC,IAAI,CAAEC,UAAaC,SAAb,EAA0BC,CAAmB,yCAAkChB,CAAlC,EAN1C,CAAD,CAAV,CAQD,CAVsB,CAJW,QAI5BY,CAJ4B,iCAgB3BA,CAhB2B,0CAAH,uDAA1B,C,yBAyBA,GAAMK,CAAAA,CAAwB,4CAAG,WAAOC,CAAP,wGAIX,IAAIjB,CAAAA,OAAJ,CAAY,SAAAC,CAAO,CAAI,CAEhDC,UAAKC,IAAL,CAAU,CAAC,CACTC,UAAU,CAAE,mCADH,CAETC,IAAI,CAAE,CAAEC,EAAE,CAAEW,CAAN,CAFG,CAGTV,IAAI,CAAE,SAAAC,CAAa,CAAI,CACrBP,CAAO,CAACQ,IAAI,CAACC,KAAL,CAAWF,CAAa,CAACU,YAAzB,CAAD,CACR,CALQ,CAMTN,IAAI,CAAEC,UAAaC,SAAb,EAA0BC,CAAmB,kEAA2DE,CAA3D,EAN1C,CAAD,CAAV,CAQD,CAV0B,CAJW,QAIhCC,CAJgC,iCAgB/BA,CAhB+B,0CAAH,uDAA9B,C,6BA2BA,GAAMC,CAAAA,CAAqB,4CAAG,WAAOC,CAAP,CAAaT,CAAb,CAAuBZ,CAAvB,wGAEX,IAAIC,CAAAA,OAAJ,CAAY,SAAAC,CAAO,CAAI,CAC7CC,UAAKC,IAAL,CAAU,CAAC,CACTC,UAAU,CAAE,+BADH,CAETC,IAAI,CAAE,CAAEe,IAAI,CAAJA,CAAF,CAAQT,QAAQ,CAARA,CAAR,CAAkBZ,UAAU,CAAVA,CAAlB,CAFG,CAGTQ,IAAI,CAAEN,CAHG,CAITW,IAAI,CAAEC,UAAaC,SAAb,EAA0BD,UAAaQ,eAAb,CAA6B,CAC3DC,OAAO,kCAA4BF,CAA5B,CADoD,CAE3DG,IAAI,CAAE,OAFqD,CAA7B,CAJvB,CAAD,CAAV,CASD,CAVuB,CAFW,QAE7BC,CAF6B,iCAc5BA,CAd4B,0CAAH,uDAA3B,C,0BAuBA,GAAMC,CAAAA,CAAuB,4CAAG,WAAO1B,CAAP,wGACb,IAAIC,CAAAA,OAAJ,CAAY,SAAAC,CAAO,CAAI,CAC7CC,UAAKC,IAAL,CAAU,CAAC,CACTC,UAAU,CAAE,iCADH,CAETC,IAAI,CAAE,CAAEC,EAAE,CAAEP,CAAN,CAFG,CAGTQ,IAAI,CAAEN,CAHG,CAITW,IAAI,CAAEC,UAAaC,SAJV,CAAD,CAAV,CAMD,CAPuB,CADa,QAC/BU,CAD+B,iCAS9BA,CAT8B,0CAAH,uDAA7B,C,4BAYP,GAAMT,CAAAA,CAAmB,CAAG,SAAAO,CAAO,QAAI,WAAM,CAC3CT,UAAaQ,eAAb,CAA6B,CAAEC,OAAO,CAAPA,CAAF,CAAWC,IAAI,CAAE,OAAjB,CAA7B,CACD,CAFkC,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     qtype_shortmath/api_helpers\n * @package    qtype_shortmath\n * @author     Simen Wiik <simenwiik@hotmail.com>\n * @copyright  2021 NTNU\n */\n\nimport Ajax from \"core/ajax\";\nimport notification from \"core/notification\";\n\n/**\n * Retrieves the shortmath template with given id\n *\n * @param {int} templateId id of the template, according to mdl_qtype_shortmath_templates\n *                         table in the database\n */\nexport const getShortmathTemplate = async (templateId) => {\n\n  // Since \"done\" takes a callback function, we have to wait for the\n  // callback function to complete before the ajax call returns the result\n  const template = await new Promise(resolve => {\n\n    Ajax.call([{\n      methodname: \"qtype_shortmath_get_template\",\n      args: { id: templateId },\n      done: foundTemplate => {\n        resolve(JSON.parse(foundTemplate.template));\n      },\n      fail: notification.exception || defaultFailCallback(`Couldn't get template with id ${templateId}`)\n    }]);\n  });\n\n  return template;\n};\n\n/**\n * Retrieves the editorconfig for the given shortmath question id.\n *\n * @param {int} questionId id of the question, according to mdl_qtype_shortmath_options\n *                         table in the database\n */\nexport const getShortmathEditorconfig = async (questionId) => {\n\n  // Since \"done\" takes a callback function, we have to wait for the\n  // callback function to complete before the ajax call returns the result\n  const editorconfig = await new Promise(resolve => {\n\n    Ajax.call([{\n      methodname: \"qtype_shortmath_get_editor_config\",\n      args: { id: questionId },\n      done: foundTemplate => {\n        resolve(JSON.parse(foundTemplate.editorconfig));\n      },\n      fail: notification.exception || defaultFailCallback(`Couldn't get editor configuration for question with id ${questionId}`)\n    }]);\n  });\n\n  return editorconfig;\n};\n\n/**\n * Saves shortmath template\n * \n * @param {string} name Name of the template\n * @param {string} template Template as a string in JSON format\n * @param {int} templateId id of the template, according to mdl_qtype_shortmath_templates\n *                         table in the database\n */\nexport const saveShortmathTemplate = async (name, template, templateId) => {\n\n  const succeeded = await new Promise(resolve => {\n    Ajax.call([{\n      methodname: \"qtype_shortmath_save_template\",\n      args: { name, template, templateId },\n      done: resolve,\n      fail: notification.exception || notification.addNotification({\n        message: `Couldn't save template ${name}`,\n        type: \"error\"\n      })\n    }]);\n  });\n\n  return succeeded;\n};\n\n/**\n * Deletes the shortmath template with given id\n *\n * @param {int} templateId id of the template, according to mdl_qtype_shortmath_templates\n *                         table in the database\n */\nexport const deleteShortmathTemplate = async (templateId) => {\n  const succeeded = await new Promise(resolve => {\n    Ajax.call([{\n      methodname: \"qtype_shortmath_delete_template\",\n      args: { id: templateId },\n      done: resolve,\n      fail: notification.exception\n    }]);\n  });\n  return succeeded;\n}\n\nconst defaultFailCallback = message => () => {\n  notification.addNotification({ message, type: \"error\" });\n};"],"file":"api_helpers.min.js"}