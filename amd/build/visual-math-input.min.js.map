{"version":3,"sources":["../src/visual-math-input.js"],"names":["Input","input","inputParent","closest","document","createElement","classList","add","MQ","MathQuill","getInterface","MathField","spaceBehavesLikeTab","handlers","edit","field","onEdit","parent","appendChild","$input","value","latex","querySelector","textarea","addEventListener","setAttribute","Control","name","text","onClick","element","innerHTML","ControlList","wrapper","defineDefault","controls","names","control","enable","console","log","define","cmd","typedText","write","moveToRightEnd"],"mappings":"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","sourcesContent":["import MathQuill from \"qtype_shortmath/mathquill\";\n\n// When a control button is clicked, the input blurs.\n// This lets the control button know which input to act on.\nlet lastFocusedInput = null;\n\nclass Input {\n    #rawInput;  // Plain HTMLInputElement\n    #mathInput; // MathQuill Field\n    #parent;\n    #mathquillContainer;\n    #textarea;\n\n    constructor(input, inputParent) {\n        this.#rawInput = input;\n        if (typeof inputParent === \"string\") {\n            this.#parent = input.closest(inputParent);\n        }\n        this.#mathquillContainer = document.createElement(\"div\");\n        this.#mathquillContainer.classList.add(\"visual-math-input-field\");\n        let MQ = MathQuill.getInterface(2);\n        this.#mathInput = MQ.MathField(this.#mathquillContainer, {\n            spaceBehavesLikeTab: true,\n            handlers: {\n                edit: field => {\n                    this.onEdit(input, field);\n                }\n            }\n        });\n        this.parent.appendChild(this.#mathquillContainer);\n        this.onEdit = ($input, field) => {\n            $input.value = `\\\\[ ${field.latex()} \\\\]`;\n        };\n        this.#textarea = this.parent.querySelector(\"textarea\");\n        this.textarea.addEventListener(\"blur\", () => {\n            lastFocusedInput = this;\n        });\n    }\n\n    get parent() {\n        return this.#parent;\n    }\n\n    get textarea() {\n        return this.#textarea;\n    }\n\n    get rawInput() {\n        return this.#rawInput;\n    }\n\n    get mathInput() {\n        return this.#mathInput;\n    }\n\n    enable() {\n        this.textarea.setAttribute(\"disabled\", false);\n    }\n\n    disable() {\n        this.textarea.setAttribute(\"disabled\", true);\n    }\n\n}\n\nclass Control {\n    element = null;\n\n    constructor(name, text, onClick) {\n        this.name = name;\n        this.text = text;\n        this.onClick = onClick;\n    }\n\n    enable() {\n        if (this.element !== null) {\n            return;\n        }\n        this.element = document.createElement(\"button\");\n        this.element.innerHTML = this.text;\n        this.element.classList.add(\"visual-math-input-control\", \"btn\", \"btn-primary\");\n        // this.element.addEventListener(\"click\", event => {\n        // event.preventDefault();\n        // if (lastFocusedInput !== null) {\n        // TODO: mathInput or textfield?\n        //     this.addEventListener(\"click\", lastFocusedInput.mathInput);\n        //     lastFocusedInput.mathInput.focus();\n        // }\n        // });\n    }\n\n}\n\nclass ControlList {\n    controls = [];\n\n    constructor(wrapper) {\n        this.wrapper = wrapper;\n        this.wrapper.classList.add(\"visual-math-input-wrapper\");\n        this.defineDefault();\n    }\n\n    define(name, text, onClick) {\n        this.controls[name] = new Control(name, text, onClick);\n    }\n\n    enable(names) {\n        for (let name of names) {\n            let control = this.controls[name];\n            control.enable();\n            console.log(control);\n            this.wrapper.appendChild(control.element);\n        }\n    }\n\n    enableAll() {\n        for (let control of this.controls) {\n            control.enable();\n            this.wrapper.appendChild(control.element);\n        }\n    }\n\n    defineDefault() {\n        // It is also possible to render \\\\[ \\\\binom{n}{k} \\\\] with MathJax.\n        // Using MathQuill's HTML output is slightly less clean, but we avoid using YUI and MathJax.\n\n        let sqrt = '<span class=\"mq-root-block\">&radic;</span>';\n        let int = '<span class=\"mq-root-block\">&int;</span>';\n        let sum = '<span class=\"mq-root-block\"><span class=\"mq-large-operator mq-non-leaf\">&sum;</span></span>';\n        let lim = '<span class=\"mq-root-block\">lim</span>';\n\n        let nchoosek =\n            `<div class=\"mq-math-mode\" style=\"cursor:pointer;font-size:100%;\">\n            <span class=\"mq-root-block\">\n                <span class=\"mq-non-leaf\">\n                    <span class=\"mq-paren mq-scaled\" style=\"transform: scale(0.8, 1.5);\">(</span>\n                    <span class=\"mq-non-leaf\" style=\"margin-top:0;\">\n                        <span class=\"mq-array mq-non-leaf\">\n                            <span style=\"font-size: 14px;\">\n                                <var>n</var>\n                            </span>\n                            <span style=\"font-size: 14px;\">\n                                <var>k</var>\n                            </span>\n                        </span>\n                    </span>\n                    <span class=\"mq-paren mq-scaled\" style=\"transform: scale(0.8, 1.5);\">)</span>\n                </span>\n            </span>\n        </div>`;\n\n        let divide = '<span class=\"mq-root-block\">/</span>';\n        let plusminus = '<span class=\"mq-root-block\">&plusmn;</span>';\n        let theta = '<span class=\"mq-root-block\">&theta;</span>';\n        let pi = '<span class=\"mq-root-block\">&pi;</span>';\n        let infinity = '<span class=\"mq-root-block\">&infin;</span>';\n\n        let caret = `\n        <div class=\"mq-math-mode\" style=\"cursor:pointer;font-size:100%;\">\n            <span class=\"mq-root-block\">\n                <var>x</var>\n                <span class=\"mq-supsub mq-non-leaf mq-sup-only\">\n                    <span class=\"mq-sup\">\n                        <var>y</var>\n                    </span>\n                </span>\n            </span>\n        </div>`;\n\n\n        this.define(\"sqrt\", sqrt, field => field.cmd(\"\\\\sqrt\"));\n        this.define(\"int\", int, field => field.cmd(\"\\\\int\"));\n        this.define(\"sum\", sum, field => field.cmd(\"\\\\sum\"));\n        this.define(\"lim\", lim, field => {\n            field.cmd(\"\\\\lim\").typedText(\"_\").write(\"x\").cmd(\"\\\\to\").write(\"0\").moveToRightEnd();\n        });\n        this.define(\"nchoosek\", nchoosek, field => field.cmd(\"\\\\choose\"));\n        this.define(\"divide\", divide, field => field.cmd(\"\\\\frac\"));\n        this.define(\"plusminus\", plusminus, field => field.cmd(\"\\\\pm\"));\n        this.define(\"theta\", theta, field => field.cmd(\"\\\\theta\"));\n        this.define(\"pi\", pi, field => field.cmd(\"\\\\pi\"));\n        this.define(\"infinity\", infinity, field => field.cmd(\"\\\\infinity\"));\n        this.define(\"caret\", caret, field => field.cmd(\"^\"));\n    }\n\n}\n\nexport default { Input, Control, ControlList };"],"file":"visual-math-input.min.js"}